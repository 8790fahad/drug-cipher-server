{"version":3,"sources":["../../src/services/payments.js"],"names":["getBankList","createSubAccount","FLUTTERWAVE_BASE_URL","RAVE_BASE_URL","PAYSTACK_BASE_URL","FW_SECRET_KEY","callback","f","error","options","method","url","headers","Authorization","err","response","body","info","JSON","parse","console","log","success","data","user","obj","account_bank","bank_code","account_number","account_no","toString","padStart","business_name","description","business_email","business_contact","business_contact_mobile","user_phone","business_mobile","country","split_type","split_value","amount","stringify"],"mappings":";;;;;;QAOgBA,W,GAAAA,W;QA0BAC,gB,GAAAA,gB;;AAjChB;;;;;;AAEO,IAAMC,sDAAuB,gCAA7B;AACA,IAAMC,wCAAgB,2BAAtB;AACA,IAAMC,gDAAoB,yBAA1B;AACA,IAAMC,wCAAgB,4CAAtB;;AAEA,SAASL,WAAT,GAA4D;AAAA,MAAvCM,QAAuC,uEAA5B,UAACC,CAAD;AAAA,WAAOA,CAAP;AAAA,GAA4B;AAAA,MAAlBC,KAAkB,uEAAV,UAACD,CAAD;AAAA,WAAOA,CAAP;AAAA,GAAU;;AACjE,MAAME,UAAU;AACdC,YAAQ,KADM;AAEdC,SAAQT,oBAAR,cAFc;AAGdU,aAAS;AACPC,iCAAyBR;AADlB;AAHK,GAAhB;;AAQA,yBAAQI,OAAR,EAAiB,UAACK,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACxC;AACA,QAAMC,OAAOC,KAAKC,KAAL,CAAWH,IAAX,CAAb;AACA;AACA,QAAI,CAACF,GAAL,EAAU;AACRM,cAAQC,GAAR,CAAY,iBAAZ;AACAf,eAASW,IAAT;AACD,KAHD,MAGO;AACLG,cAAQC,GAAR,CAAY,iBAAZ;AACAD,cAAQC,GAAR,CAAYP,GAAZ;AACAN,YAAM,EAAEM,QAAF,EAAOQ,SAAS,KAAhB,EAAN;AACA;AACA;AACD;AACF,GAdD;AAeD;;AAEM,SAASrB,gBAAT,GAKL;AAAA,MAJAsB,IAIA,uEAJO,EAIP;AAAA,MAHAjB,QAGA,uEAHW,UAACC,CAAD;AAAA,WAAOA,CAAP;AAAA,GAGX;AAAA,MAFAC,KAEA,uEAFQ,UAACD,CAAD;AAAA,WAAOA,CAAP;AAAA,GAER;AAAA,MADAiB,IACA;;AACA,MAAIC,MAAM;AACRC,kBAAcH,KAAKI,SADX;AAERC,oBAAgBL,KAAKM,UAAL,CAAgBC,QAAhB,GAA2BC,QAA3B,CAAoC,EAApC,EAAwC,GAAxC,CAFR;AAGRC,mBAAeT,KAAKU,WAHZ;AAIRC,oBAAgB,sBAJR;AAKRC,sBAAkBZ,KAAKU,WALf;AAMRG,6BAAyBb,KAAKc,UANtB;AAORC,qBAAiBf,KAAKc,UAPd;AAQRE,aAAS,IARD;AASRC,gBAAY,MATJ;AAURC,iBAAalB,KAAKmB;;AAGpB;;AAbU,GAAV,CAeA,IAAMjC,UAAU;AACdC,YAAQ,MADM;AAEdC,SAAQT,oBAAR,iBAFc;AAGdU,aAAS;AACP,sBAAgB,kBADT;AAEPC,iCAAyBR;AAFlB,KAHK;AAOdW,UAAME,KAAKyB,SAAL,CAAelB,GAAf;AAPQ,GAAhB;;AAUA,yBAAQhB,OAAR,EAAiB,UAACK,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACxC;AACA,QAAMC,OAAOC,KAAKC,KAAL,CAAWH,IAAX,CAAb;AACA;AACA,QAAI,CAACF,GAAL,EAAU;AACRM,cAAQC,GAAR,CAAY,iBAAZ;AACAf,eAASW,IAAT;AACD,KAHD,MAGO;AACLG,cAAQC,GAAR,CAAY,iBAAZ;AACAD,cAAQC,GAAR,CAAYP,GAAZ;AACAN,YAAM,EAAEM,QAAF,EAAOQ,SAAS,KAAhB,EAAN;AACA;AACA;AACD;AACF,GAdD;AAeD","file":"payments.js","sourcesContent":["import request from 'request'\n\nexport const FLUTTERWAVE_BASE_URL = 'https://api.flutterwave.com/v3'\nexport const RAVE_BASE_URL = 'https://api.ravepay.co/v2'\nexport const PAYSTACK_BASE_URL = 'https://api.paystack.co'\nexport const FW_SECRET_KEY = 'FLWSECK-278f7fde7290a11a144751d3410fb7d8-X'\n\nexport function getBankList(callback = (f) => f, error = (f) => f) {\n  const options = {\n    method: 'GET',\n    url: `${FLUTTERWAVE_BASE_URL}/banks/NG`,\n    headers: {\n      Authorization: `Bearer ${FW_SECRET_KEY}`,\n    },\n  }\n\n  request(options, (err, response, body) => {\n    //   console.log(body)\n    const info = JSON.parse(body)\n    // console.log(info)\n    if (!err) {\n      console.log('callback called')\n      callback(info)\n    } else {\n      console.log('error cb called')\n      console.log(err)\n      error({ err, success: false })\n      // error.success = false\n      //   res.status(500).json(error)\n    }\n  })\n}\n\nexport function createSubAccount(\n  data = {},\n  callback = (f) => f,\n  error = (f) => f,\n  user,\n) {\n  let obj = {\n    account_bank: data.bank_code,\n    account_number: data.account_no.toString().padStart(10, '0'),\n    business_name: data.description,\n    business_email: 'pharmpayng@gmail.com',\n    business_contact: data.description,\n    business_contact_mobile: data.user_phone,\n    business_mobile: data.user_phone,\n    country: 'NG',\n    split_type: 'flat',\n    split_value: data.amount,\n  }\n\n  // console.log(obj)\n\n  const options = {\n    method: 'POST',\n    url: `${FLUTTERWAVE_BASE_URL}/subaccounts`,\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${FW_SECRET_KEY}`,\n    },\n    body: JSON.stringify(obj),\n  }\n\n  request(options, (err, response, body) => {\n    //   console.log(body)\n    const info = JSON.parse(body)\n    // console.log(info)\n    if (!err) {\n      console.log('callback called')\n      callback(info)\n    } else {\n      console.log('error cb called')\n      console.log(err)\n      error({ err, success: false })\n      // error.success = false\n      //   res.status(500).json(error)\n    }\n  })\n}\n"]}