{"version":3,"sources":["../../src/services/notification.js"],"names":["list","society_id","entity_type","finalList","i","length","current","toString","push","query_type","req_id","entity_id","reference","loan_id","Promise","all","endResult","asyncGetData","formattedResp","forEach","keysFound","Object","keys","includes","concat","generalList","j","finalResult","console","log","flatList","k","current1","current2","current_entity","find","a","x","notifObj","l","current3","message","buildNotificationMessage","data","generateNotificationList","getMemberRequest","sendNotification","onesignal_url","processed_data","entityDetails","pre_process","i18n","__","message_prop","actor_username","firstname","lastname","action_type","entity_description","userId","notification","id","userObj","App_id","process","env","ONESIGNA_APP_ID","Api_key","ONESIGNAL_API_KEY","options","method","body","JSON","stringify","app_id","contents","en","include_player_ids","deviceId","source","headers","Authorization","err","response"],"mappings":"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","file":"notification.js","sourcesContent":["import i18n from 'i18n'\nimport {\n  queryContributionAsync,\n  queryPaymentRequisitionAsync,\n} from '../queries/contribution'\nimport { queryLoanApplicationAsync } from '../queries/loan'\nimport entityDetails from './entity_details'\nimport request from 'request'\nimport { usersApi } from '../queries/users'\n\nconst onesignal_url = `https://onesignal.com/api/v1/notifications`\n\n// Ishq Ibrahim wants to join Alajeseku Cooperatives\n// {{actor_username}} {{action_type}} {{entity_description}}\nexport function buildNotificationMessage(entity_type, data) {\n  let processed_data = entityDetails[entity_type].pre_process\n    ? entityDetails[entity_type].pre_process(data)\n    : data\n  //   console.log(processed_data)\n  //   let message = i18n.__(\n  //     '{{actor_username}} {{action_type}} {{entity_description}}',\n  //     processed_data,\n  //   )\n  let message = i18n.__(entityDetails[entity_type].message_prop, processed_data)\n  return message\n}\n\nexport function getMemberRequest(data = {}) {\n  return {\n    actor_username: data.firstname + ' ' + data.lastname,\n    action_type: data.action_type,\n    entity_description: data.entity_description,\n  }\n}\n\n// async get data\nexport async function asyncGetData(\n  list = [],\n  society_id = '',\n  entity_type = '',\n) {\n  let finalList = []\n\n  for (let i = 0; i < list.length; i++) {\n    let current = list[i]\n    if (\n      entity_type.toString() === '4' ||\n      entity_type.toString() === '5' ||\n      entity_type.toString() === '6'\n    ) {\n      finalList.push(\n        queryPaymentRequisitionAsync({\n          query_type: 'by_status_req',\n          req_id: current.entity_id,\n          society_id,\n        }),\n      )\n    } else if (entity_type.toString() === '7') {\n      finalList.push(\n        queryContributionAsync({\n          query_type: 'summary_by_reference',\n          society_id,\n          reference: current.entity_id,\n        }),\n      )\n    } else if (\n      entity_type.toString() === '8' ||\n      entity_type.toString() === '9' ||\n      entity_type.toString() === '10' ||\n      entity_type.toString() === '11'\n    ) {\n      finalList.push(\n        queryLoanApplicationAsync({\n          query_type: 'by_id',\n          society_id,\n          loan_id: current.entity_id,\n        }),\n      )\n    } else if (\n      entity_type.toString() === '12' ||\n      entity_type.toString() === '13' ||\n      entity_type.toString() === '14'\n    ) {\n      finalList.push(\n        queryLoanApplicationAsync({\n          query_type: 'by_id',\n          society_id,\n          loan_id: current.entity_id,\n        }),\n      )\n    }\n  }\n\n  let endResult = await Promise.all(finalList)\n  // console.log('End Result Returned', endResult)\n  return endResult\n}\n\n// generate a list of notification messages from a dataset\nexport async function generateNotificationList(list = [], society_id) {\n  // console.log('First Resp', resp)\n  let formattedResp = {}\n  list.forEach((i) => {\n    let keysFound = Object.keys(formattedResp)\n    // console.log('checking', i.entity_type)\n    // console.log(\n    //   'checking: resp',\n    //   keysFound,\n    //   'Looking for ',\n    //   i.entity_type,\n    //   keysFound.includes(i.entity_type.toString()),\n    // )\n\n    if (keysFound.includes(i.entity_type.toString())) {\n      formattedResp[i.entity_type] = formattedResp[i.entity_type].concat(i)\n    } else {\n      formattedResp[i.entity_type] = [i]\n    }\n  })\n\n  // console.log('Formatted', formattedResp)\n\n  let generalList = []\n\n  for (let j = 0; j < Object.keys(formattedResp).length; j++) {\n    let current = Object.keys(formattedResp)[j]\n    // let item = await asyncGetData(formattedResp[current])\n    // generalList.push(item)\n    generalList.push(asyncGetData(formattedResp[current], society_id, current))\n    // console.log('Adding promises', current, j)\n  }\n\n  const finalResult = await Promise.all(generalList)\n  console.log('All promises now resolved')\n  // console.log('General List Completed', finalResult)\n\n  let flatList = []\n  // [ k[ j[ l[TextRow] ] ], [ [ [TextRow] ] ] ]\n  for (let k = 0; k < finalResult.length; k++) {\n    let current1 = finalResult[k]\n    // console.log(current1)\n    for (let j = 0; j < current1.length; j++) {\n      let current2 = current1[j]\n      let current_entity = Object.keys(formattedResp).find((a, x) => x === k)\n      // console.log(current_entity, 'current_entity')\n      let notifObj = formattedResp[current_entity][j]\n      // console.log(notifObj)\n      for (let l = 0; l < current2.length; l++) {\n        let current3 = current2[l]\n        // console.log(current3)\n        notifObj.message = buildNotificationMessage(current_entity, current3)\n        notifObj.data = current3\n        // flatList.push({ data: current3, notifObj })\n        flatList.push(notifObj)\n      }\n    }\n  }\n\n  return flatList\n}\n\nexport function sendNotification(userId = '', notification = '') {\n  usersApi(\n    {\n      id: userId,\n      query_type: 'info',\n    },\n    (data) => {\n      let userObj = data[0]\n      const App_id = process.env.ONESIGNA_APP_ID\n      const Api_key = process.env.ONESIGNAL_API_KEY\n\n      const options = {\n        method: 'POST',\n        body: JSON.stringify({\n          app_id: App_id,\n          contents: { en: notification },\n          include_player_ids: [userObj.deviceId], //userObj.deviceId\n          data: { source: 'message' },\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Basic ' + Api_key,\n        },\n      }\n\n      request(options, (err, response, body) => {\n        if (!err) {\n          console.log('Push notification sent')\n          console.log('RESPONSE', response, body)\n        } else {\n          console.log('Error sending push notification')\n          console.log('ERROR', err)\n        }\n      })\n    },\n  )\n}\n"]}