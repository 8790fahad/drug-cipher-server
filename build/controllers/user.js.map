{"version":3,"sources":["../../src/controllers/user.js"],"names":["User","db","create","req","res","body","errors","isValid","firstname","lastname","username","role","email","password","status","json","findAll","where","then","user","length","newUser","bcrypt","genSalt","err","salt","hash","catch","login","originalPassword","dataValues","compare","isMatch","console","log","id","payload","jwt","sign","expiresIn","token","success","findAllUsers","findById","params","userId","msg","update","HospitalId","image","deleteUser","destroy"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AAIA;;;;AACA;;;;;;AAJA,IAAMA,OAAOC,iBAAGD,IAAhB;;AAEA;;;AAIA;AACA,IAAME,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,8BACC,wBAAqBD,IAAIE,IAAzB,CADD;AAAA,MACnBC,MADmB,yBACnBA,MADmB;AAAA,MACXC,OADW,yBACXA,OADW;;AAAA,kBASvBJ,IAAIE,IATmB;AAAA,MAGzBG,SAHyB,aAGzBA,SAHyB;AAAA,MAIzBC,QAJyB,aAIzBA,QAJyB;AAAA,MAKzBC,QALyB,aAKzBA,QALyB;AAAA,MAMzBC,IANyB,aAMzBA,IANyB;AAAA,MAOzBC,KAPyB,aAOzBA,KAPyB;AAAA,MAQzBC,QARyB,aAQzBA,QARyB;;AAW3B;;AACA,MAAG,CAACN,OAAJ,EAAa;AACX,WAAOH,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;;AAEDN,OAAKgB,OAAL,CAAa,EAAEC,OAAO,EAAEL,YAAF,EAAT,EAAb,EAAmCM,IAAnC,CAAwC,gBAAQ;AAC9C,QAAIC,KAAKC,MAAT,EAAiB;AACf,aAAOhB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,OAAO,uBAAT,EAArB,CAAP;AACD,KAFD,MAEO;AACL,UAAIS,UAAU;AACZb,4BADY;AAEZC,0BAFY;AAGZC,0BAHY;AAIZC,kBAJY;AAKZC,oBALY;AAMZC;AANY,OAAd;AAQAS,yBAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChCH,2BAAOI,IAAP,CAAYL,QAAQR,QAApB,EAA8BY,IAA9B,EAAoC,UAACD,GAAD,EAAME,IAAN,EAAe;AACjD,cAAIF,GAAJ,EAAS,MAAMA,GAAN;AACTH,kBAAQR,QAAR,GAAmBa,IAAnB;AACA1B,eAAKE,MAAL,CAAYmB,OAAZ,EACGH,IADH,CACQ,gBAAQ;AACZd,gBAAIW,IAAJ,CAAS,EAAEI,UAAF,EAAT;AACD,WAHH,EAIGQ,KAJH,CAIS,eAAO;AACZvB,gBAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,QAAF,EAArB;AACD,WANH;AAOD,SAVD;AAWD,OAZD;AAaD;AACF,GA1BD;AA2BD,CA3CD;;AA6CA,IAAMI,QAAQ,SAARA,KAAQ,CAACzB,GAAD,EAAMC,GAAN,EAAc;AAAA,2BACE,qBAAkBD,IAAIE,IAAtB,CADF;AAAA,MAClBC,MADkB,sBAClBA,MADkB;AAAA,MACVC,OADU,sBACVA,OADU;;AAG1B;;;AACA,MAAG,CAACA,OAAJ,EAAa;AACX,WAAOH,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;;AANyB,mBAQEH,IAAIE,IARN;AAAA,MAQlBO,KARkB,cAQlBA,KARkB;AAAA,MAQXC,QARW,cAQXA,QARW;;;AAU1Bb,OAAKgB,OAAL,CAAa;AACXC,WAAO;AACLL;AADK;AADI,GAAb,EAKCM,IALD,CAKM,gBAAQ;AACZ;AACA,QAAI,CAACC,KAAKC,MAAV,EAAkB;AAChBd,aAAOM,KAAP,GAAe,iBAAf;AACA,aAAOR,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;;AAED,QAAIuB,mBAAmBV,KAAK,CAAL,EAAQW,UAAR,CAAmBjB,QAA1C;;AAEA;AACAS,uBACGS,OADH,CACWlB,QADX,EACqBgB,gBADrB,EAEGX,IAFH,CAEQ,mBAAW;AACf,UAAIc,OAAJ,EAAa;AACX;AACAC,gBAAQC,GAAR,CAAY,UAAZ;AAFW,iCAGcf,KAAK,CAAL,EAAQW,UAHtB;AAAA,YAGHK,EAHG,sBAGHA,EAHG;AAAA,YAGCzB,QAHD,sBAGCA,QAHD;;AAIX,YAAM0B,UAAU,EAAED,MAAF,EAAMzB,kBAAN,EAAhB,CAJW,CAIuB;AAClC;;AAEA2B,+BAAIC,IAAJ,CAASF,OAAT,EAAkB,QAAlB,EAA4B;AAC1BG,qBAAW;AADe,SAA5B,EAEG,UAACf,GAAD,EAAMgB,KAAN,EAAgB;AACjBpC,cAAIW,IAAJ,CAAS;AACP0B,qBAAS,IADF;AAEPD,mBAAO,YAAYA,KAFZ;AAGP7B,kBAAMQ,KAAK,CAAL,EAAQW,UAAR,CAAmBnB;AAHlB,WAAT;AAKD,SARD;AASD,OAhBD,MAgBO;AACLL,eAAOO,QAAP,GAAkB,sBAAlB;AACA,eAAOT,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,MAArB,CAAP;AACD;AACJ,KAvBD,EAuBGqB,KAvBH,CAuBS;AAAA,aAAOM,QAAQC,GAAR,CAAYV,GAAZ,CAAP;AAAA,KAvBT;AAwBD,GAvCD,EAuCGG,KAvCH,CAuCS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACS,QAAD,EAArB,CAAP;AAAA,GAvCT;AAwCD,CAlDD;;AAoDA;AACA,IAAMkB,eAAe,SAAfA,YAAe,CAACvC,GAAD,EAAMC,GAAN,EAAc;AACjCJ,OAAKgB,OAAL,GACGE,IADH,CACQ,gBAAQ;AACZd,QAAIW,IAAJ,CAAS,EAAEI,UAAF,EAAT;AACD,GAHH,EAIGQ,KAJH,CAIS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,QAAF,EAArB,CAAP;AAAA,GAJT;AAKD,CAND;;AAQA;AACA,IAAMmB,WAAW,SAAXA,QAAW,CAACxC,GAAD,EAAMC,GAAN,EAAc;AAC7B,MAAM+B,KAAKhC,IAAIyC,MAAJ,CAAWC,MAAtB;;AAEA7C,OAAKgB,OAAL,CAAa,EAAEC,OAAO,EAAEkB,MAAF,EAAT,EAAb,EACGjB,IADH,CACQ,gBAAQ;AACZ,QAAG,CAACC,KAAKC,MAAT,EAAiB;AACf,aAAOhB,IAAIW,IAAJ,CAAS,EAAE+B,KAAK,gBAAP,EAAT,CAAP;AACD;AACD1C,QAAIW,IAAJ,CAAS,EAAEI,UAAF,EAAT;AACD,GANH,EAOGQ,KAPH,CAOS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,QAAF,EAArB,CAAP;AAAA,GAPT;AAQD,CAXD;;AAaA;AACA,IAAMuB,SAAS,SAATA,MAAS,CAAC5C,GAAD,EAAMC,GAAN,EAAc;AAAA,mBAC4BD,IAAIE,IADhC;AAAA,MACrBG,SADqB,cACrBA,SADqB;AAAA,MACVC,QADU,cACVA,QADU;AAAA,MACAuC,UADA,cACAA,UADA;AAAA,MACYrC,IADZ,cACYA,IADZ;AAAA,MACkBsC,KADlB,cACkBA,KADlB;;AAE3B,MAAMd,KAAKhC,IAAIyC,MAAJ,CAAWC,MAAtB;;AAEA7C,OAAK+C,MAAL,CACE;AACEvC,wBADF;AAEEC,sBAFF;AAGEE;AAHF,GADF,EAME,EAAEM,OAAO,EAAEkB,MAAF,EAAT,EANF,EAQGjB,IARH,CAQQ;AAAA,WAAQd,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEI,UAAF,EAArB,CAAR;AAAA,GARR,EASGQ,KATH,CASS;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,QAAF,EAArB,CAAP;AAAA,GATT;AAUD,CAdD;;AAgBA;AACA,IAAM0B,aAAa,SAAbA,UAAa,CAAC/C,GAAD,EAAMC,GAAN,EAAc;AAC/B,MAAM+B,KAAKhC,IAAIyC,MAAJ,CAAWC,MAAtB;;AAEA7C,OAAKmD,OAAL,CAAa,EAAElC,OAAO,EAAEkB,MAAF,EAAT,EAAb,EACGjB,IADH,CACQ;AAAA,WAAMd,IAAIU,MAAJ,CAAWC,IAAX,CAAgB,EAAE+B,KAAK,qCAAP,EAAhB,CAAN;AAAA,GADR,EAEGnB,KAFH,CAES;AAAA,WAAOvB,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE+B,KAAK,mBAAP,EAArB,CAAP;AAAA,GAFT;AAGD,CAND;;QASI5C,M,GAAAA,M;QACA0B,K,GAAAA,K;QACAc,Y,GAAAA,Y;QACAC,Q,GAAAA,Q;QACAI,M,GAAAA,M;QACAG,U,GAAAA,U","file":"user.js","sourcesContent":["import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport passport from 'passport';\n\nimport db from '../models';\nconst User = db.User;\n\n// load input validation\nimport validateRegisterForm from '../validation/register';\nimport validateLoginForm from '../validation/login';\n\n// create user\nconst create = (req, res) => {\n  const { errors, isValid } = validateRegisterForm(req.body);\n  let { \n    firstname, \n    lastname, \n    username, \n    role,\n    email, \n    password,\n  } = req.body;\n\n  // check validation\n  if(!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  User.findAll({ where: { email } }).then(user => {\n    if (user.length) {\n      return res.status(400).json({ email: 'Email already exists!' });\n    } else {\n      let newUser = { \n        firstname, \n        lastname, \n        username, \n        role,\n        email, \n        password, \n      };\n      bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw err;\n          newUser.password = hash;\n          User.create(newUser)\n            .then(user => {\n              res.json({ user });\n            })\n            .catch(err => {\n              res.status(500).json({ err });\n            });\n        });\n      });\n    }\n  });\n};\n\nconst login = (req, res) => {\n  const { errors, isValid } = validateLoginForm(req.body);\n\n  // check validation\n  if(!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const { email, password } = req.body;\n\n  User.findAll({ \n    where: { \n      email \n    } \n  })\n  .then(user => {\n    //check for user\n    if (!user.length) {\n      errors.email = 'User not found!';\n      return res.status(404).json(errors);\n    }\n     \n    let originalPassword = user[0].dataValues.password\n\n    //check for password\n    bcrypt\n      .compare(password, originalPassword)\n      .then(isMatch => {\n        if (isMatch) {\n          // user matched\n          console.log('matched!')\n          const { id, username } = user[0].dataValues;\n          const payload = { id, username }; //jwt payload\n          // console.log(payload)\n\n          jwt.sign(payload, 'secret', { \n            expiresIn: 3600 \n          }, (err, token) => {\n            res.json({\n              success: true,\n              token: 'Bearer ' + token,\n              role: user[0].dataValues.role\n            });\n          });\n        } else {\n          errors.password = 'Password not correct';\n          return res.status(400).json(errors);\n        }\n    }).catch(err => console.log(err));\n  }).catch(err => res.status(500).json({err}));\n};\n\n// fetch all users\nconst findAllUsers = (req, res) => {\n  User.findAll()\n    .then(user => {\n      res.json({ user });\n    })\n    .catch(err => res.status(500).json({ err }));\n};\n\n// fetch user by userId\nconst findById = (req, res) => {\n  const id = req.params.userId;\n  \n  User.findAll({ where: { id } })\n    .then(user => {\n      if(!user.length) {\n        return res.json({ msg: 'user not found'})\n      }\n      res.json({ user })\n    })\n    .catch(err => res.status(500).json({ err }));\n};\n\n// update a user's info\nconst update = (req, res) => {\n  let { firstname, lastname, HospitalId, role, image } = req.body;\n  const id = req.params.userId;\n\n  User.update(\n    {\n      firstname,\n      lastname,\n      role,\n    },\n    { where: { id } }\n  )\n    .then(user => res.status(200).json({ user }))\n    .catch(err => res.status(500).json({ err }));\n};\n\n// delete a user\nconst deleteUser = (req, res) => {\n  const id = req.params.userId;\n\n  User.destroy({ where: { id } })\n    .then(() => res.status.json({ msg: 'User has been deleted successfully!' }))\n    .catch(err => res.status(500).json({ msg: 'Failed to delete!' }));\n};\n\nexport { \n    create, \n    login, \n    findAllUsers, \n    findById, \n    update, \n    deleteUser \n}"]}