{"version":3,"sources":["../src/index.js"],"names":["require","cloudinary","hbs","nodemailer","path","app","use","bodyParser","json","port","process","env","PORT","set","express","static","__dirname","transporter","createTransport","service","host","secure","auth","user","pass","handlebarOptions","viewEngine","partialsDir","resolve","defaultLayout","viewPath","models","sequelize","sync","then","console","log","passport","initialize","get","req","res","send","config","cloud_name","api_key","api_secret","server","listen","address"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACAA,QAAQ,qBAAR;AACAA,QAAQ,gBAAR;AACA,IAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,IAAME,MAAMF,QAAQ,+BAAR,CAAZ;AACA,IAAMG,aAAaH,QAAQ,YAAR,CAAnB;AACA,IAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA,IAAMK,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,KAA/B;;AAEA;AACAP,IAAIQ,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEA;AACAR,IAAIC,GAAJ,CAAQQ,kBAAQC,MAAR,CAAeC,YAAY,SAA3B,CAAR;;AAEAX,IAAIC,GAAJ,CAAQ,qBAAR;;AAEA;AACA,IAAIW,cAAcd,WAAWe,eAAX,CAA2B;AAC3CC,WAAS,OADkC;AAE3CC,QAAM,gBAFqC;AAG3CX,QAAM,GAHqC;AAI3CY,UAAQ,IAJmC;AAK3CC,QAAM;AACJC,UAAM,wBADF;AAEJC,UAAM;AAFF;AALqC,CAA3B,CAAlB;;AAWA;AACA,IAAMC,mBAAmB;AACvBC,cAAY;AACVC,iBAAavB,KAAKwB,OAAL,CAAa,aAAb,CADH;AAEVC,mBAAe;AAFL,GADW;AAKvBC,YAAU1B,KAAKwB,OAAL,CAAa,aAAb;AALa,CAAzB;;AAQA;AACAX,YAAYX,GAAZ,CAAgB,SAAhB,EAA2BJ,IAAIuB,gBAAJ,CAA3B;AACA;AACA;AACAM,iBAAOC,SAAP,CAAiBC,IAAjB,GAAwBC,IAAxB,CAA6B,YAAM;AACjCC,UAAQC,GAAR,CAAY,oCAAZ;AACD,CAFD;;AAIA;AACA/B,IAAIC,GAAJ,CAAQ+B,mBAASC,UAAT,EAAR;;AAEA;AACAtC,QAAQ,mBAAR,EAA6BqC,kBAA7B;QACSpB,W,GAAAA,W;AACT;;AACAZ,IAAIkC,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,IAAJ,CAAS,gBAAT,CAAd;AAAA,CAAb;AACAzC,WAAW0C,MAAX,CAAkB;AAChBC,cAAY,WADI;AAEhBC,WAAS,iBAFO;AAGhBC,cAAY;AAHI,CAAlB;AAKA9C,QAAQ,kBAAR,EAA4BK,GAA5B;AACAL,QAAQ,iBAAR,EAA2BK,GAA3B;;AAEA;AACA,IAAI0C,SAAS1C,IAAI2C,MAAJ,CAAWvC,IAAX,EAAiB,YAAY;AACxC,MAAIW,OAAO2B,OAAOE,OAAP,GAAiBA,OAA5B;AACA,MAAIxC,OAAOsC,OAAOE,OAAP,GAAiBxC,IAA5B;;AAEA0B,UAAQC,GAAR,CAAY,+BAAZ,EAA6ChB,IAA7C,EAAmDX,IAAnD;AACD,CALY,CAAb","file":"index.js","sourcesContent":["import express from \"express\";\nimport passport from \"passport\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport models from \"./models\";\nrequire(\"babel-core/register\");\nrequire(\"babel-polyfill\");\nconst cloudinary = require(\"cloudinary\");\nconst hbs = require(\"nodemailer-express-handlebars\");\nconst nodemailer = require(\"nodemailer\");\nconst path = require(\"path\");\nconst app = express();\napp.use(bodyParser.json());\n\nlet port = process.env.PORT || 34561;\n\n// set the view engine to ejs\napp.set(\"view engine\", \"ejs\");\n\n// make express look in the public directory for assets (css/js/img)\napp.use(express.static(__dirname + \"/public\"));\n\napp.use(cors());\n\n// initialize nodemailer\nvar transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  host: 'smtp.gmail.com',\n  port: 465,\n  secure: true,\n  auth: {\n    user: \"8790fahadado@gmail.com\",\n    pass: \"ahjdonxvjbfeamzu\",\n  },\n});\n\n// point to the template folder\nconst handlebarOptions = {\n  viewEngine: {\n    partialsDir: path.resolve(\"./src/views\"),\n    defaultLayout: false,\n  },\n  viewPath: path.resolve(\"./src/views\"),\n};\n\n// use a template file with nodemailer\ntransporter.use(\"compile\", hbs(handlebarOptions));\n// force: true will drop the table if it already exits\n// models.sequelize.sync({ force: true }).then(() => {\nmodels.sequelize.sync().then(() => {\n  console.log(\"Drop and Resync with {force: true}\");\n});\n\n// passport middleware\napp.use(passport.initialize());\n\n// passport config\nrequire(\"./config/passport\")(passport);\nexport { transporter };\n//default route\napp.get(\"/\", (req, res) => res.send(\"Hello my World\"));\ncloudinary.config({\n  cloud_name: \"drxkp1erj\",\n  api_key: \"218187136849528\",\n  api_secret: \"dF879L426Z38DnkBvSKuG_IcSCo\",\n});\nrequire(\"./routes/user.js\")(app);\nrequire(\"./routes/kyc.js\")(app);\n\n//create a server\nvar server = app.listen(port, function () {\n  var host = server.address().address;\n  var port = server.address().port;\n\n  console.log(\"App listening at http://%s:%s\", host, port);\n});\n"]}