{"version":3,"sources":["../../src/models/index.js"],"names":["require","config","basename","path","__filename","username","process","env","DB_USERNAME","password","DB_PASSWORD","database","DB_NAME","host","DB_HOST","dialect","DB_DIALECT","pool","max","min","acquire","idle","db","sequelize","use_env_variable","Sequelize","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA,IAAMC,WAAWC,eAAKD,QAAL,CAAcE,UAAd,CAAjB;;AAEA,IAAMH,SAAS;AACbI,YAAUC,QAAQC,GAAR,CAAYC,WADT;AAEbC,YAAUH,QAAQC,GAAR,CAAYG,WAFT;AAGbC,YAAUL,QAAQC,GAAR,CAAYK,OAHT;AAIbC,QAAMP,QAAQC,GAAR,CAAYO,OAJL;AAKbC,WAAST,QAAQC,GAAR,CAAYS,UALR;AAMbC,QAAM;AACJC,SAAK,CADD;AAEJC,SAAK,CAFD;AAGJC,aAAS,KAHL;AAIJC,UAAM;AAJF;AANO,CAAf;;AAcA,IAAMC,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;AACA,IAAItB,OAAOuB,gBAAX,EAA6B;AAC3BD,cAAY,IAAIE,mBAAJ,CAAcnB,QAAQC,GAAR,CAAYN,OAAOuB,gBAAnB,CAAd,EAAoDvB,MAApD,CAAZ;AACD,CAFD,MAEO;AACLsB,cAAY,IAAIE,mBAAJ,CAAcxB,OAAOU,QAArB,EAA+BV,OAAOI,QAAtC,EAAgDJ,OAAOQ,QAAvD,EAAiER,MAAjE,CAAZ;AACD;;AAEDyB,aACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU,gBAAQ;AACd,SAAQC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAAS5B,QAAvC,IAAqD4B,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACD,CAJH,EAKGC,OALH,CAKW,gBAAQ;AACf,MAAMC,QAAQX,UAAU,QAAV,EAAoBpB,eAAKgC,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAApB,CAAd;AACAR,KAAGY,MAAME,IAAT,IAAiBF,KAAjB;AACD,CARH;;AAUAG,OAAOC,IAAP,CAAYhB,EAAZ,EAAgBW,OAAhB,CAAwB,qBAAa;AACnC,MAAIX,GAAGiB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BlB,OAAGiB,SAAH,EAAcC,SAAd,CAAwBlB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGG,SAAH,GAAeA,mBAAf;;kBAEeH,E","file":"index.js","sourcesContent":["'use strict';\n\nimport fs  from 'fs';\nimport path  from 'path';\nimport Sequelize  from 'sequelize';\nrequire('dotenv').config();\n\nconst basename = path.basename(__filename);\n\nconst config = {\n  username: process.env.DB_USERNAME,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  host: process.env.DB_HOST,\n  dialect: process.env.DB_DIALECT,\n  pool: {\n    max: 5,\n    min: 0,\n    acquire: 30000,\n    idle: 10000,\n  },\n};\n\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach(file => {\n    const model = sequelize['import'](path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"]}